from manim import *

class LinkedStack(Scene):
    table_kwarg = {
        "include_outer_lines" : True,
    }
    def construct(self):
        #Title
        title = Text("Multiple Linked Stacks")
        self.play(DrawBorderThenFill(title))
        self.wait(2)
        self.play(FadeOut(title))

        #Define big array
        big = MobjectTable(
            [[Text("00000", color=BLACK), Text("00000", color=BLACK), Text("00000", color=BLACK), Text("00000", color=BLACK), Text("00000", color=BLACK)]],
            include_outer_lines=True, line_config={"color": WHITE}).scale(0.6)
        bigent = big.get_entries()
        bind0 = Text("0").scale(0.5).next_to(bigent[0],DOWN*3)
        bind1 = Text("1").scale(0.5).next_to(bigent[1],DOWN*3)
        bind2 = Text("2").scale(0.5).next_to(bigent[2],DOWN*3)
        bind3 = Text("3").scale(0.5).next_to(bigent[3],DOWN*3)
        bind4 = Text("4").scale(0.5).next_to(bigent[4],DOWN*3)
        biggroup = VGroup(big, bind0, bind1, bind2, bind3, bind4)
        bigtitle = Text("5 Stacks").scale(0.6).next_to(biggroup, DOWN*2)
        biggroup = VGroup(big, bind0, bind1, bind2, bind3, bind4, bigtitle).to_edge(DOWN)
        operation = Text("Operation:").scale(0.7).to_corner(UP+RIGHT)
        self.play(Create(biggroup), Write(operation))
        self.wait(1)
        
        #Add initial tops
        top00a = Arrow(start = bigent[0].get_left() + 0.6*LEFT, end = bigent[0].get_left(), buff=0, stroke_width = 4)
        top10a = Arrow(start = bigent[1].get_left() + 0.6*LEFT, end = bigent[1].get_left(), buff=0, stroke_width = 4)
        top20a = Arrow(start = bigent[2].get_left() + 0.6*LEFT, end = bigent[2].get_left(), buff=0, stroke_width = 4)
        top30a = Arrow(start = bigent[3].get_left() + 0.6*LEFT, end = bigent[3].get_left(), buff=0, stroke_width = 4)
        top40a = Arrow(start = bigent[4].get_left() + 0.6*LEFT, end = bigent[4].get_left(), buff=0, stroke_width = 4)
        top00t = Text("top").scale(0.3).next_to(top00a, UP, buff=0, aligned_edge=LEFT)
        top10t = Text("top").scale(0.3).next_to(top10a, UP, buff=0, aligned_edge=LEFT)
        top20t = Text("top").scale(0.3).next_to(top20a, UP, buff=0, aligned_edge=LEFT)
        top30t = Text("top").scale(0.3).next_to(top30a, UP, buff=0, aligned_edge=LEFT)
        top40t = Text("top").scale(0.3).next_to(top40a, UP, buff=0, aligned_edge=LEFT)
        top00 = VGroup(top00a, top00t)
        top10 = VGroup(top10a, top10t)
        top20 = VGroup(top20a, top20t)
        top30 = VGroup(top30a, top30t)
        top40 = VGroup(top40a, top40t)
        self.play(Create(top00), Create(top10), Create(top20), Create(top30), Create(top40))
        self.wait(1)

        #push(0, 10)
        push10 = Text("push(0, 10)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push10))
        self.wait(1)
        elem10 = MobjectTable([[Text("10", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(bigent[0], UP*3)
        self.play(Create(elem10))
        self.wait(1)
        t10 = Text("10").scale(0.6).move_to(elem10.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t10))
        self.wait(1)
        from10 = Arrow(start = elem10.get_bottom(), end = bigent[0].get_top(), buff=0, stroke_width = 6)
        self.play(Create(from10))
        self.wait(1)
        top01a = Arrow(start = elem10.get_left() + 0.6*LEFT, end = elem10.get_left(), buff=0, stroke_width = 4)
        top01t = Text("top").scale(0.3).next_to(top01a, UP, buff=0, aligned_edge=LEFT)
        top01 = VGroup(top01a, top01t)
        self.play(ReplacementTransform(top00, top01))
        self.wait(1)
        self.play(Unwrite(push10))
        self.wait(1)
        
        #push(0, 20)
        push20 = Text("push(0, 20)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push20))
        self.wait(1)
        elem20 = MobjectTable([[Text("20", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(elem10, UP*3)
        self.play(Create(elem20))
        self.wait(1)
        t20 = Text("20").scale(0.6).move_to(elem20.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t20))
        self.wait(1)
        from20 = Arrow(start = elem20.get_bottom(), end = elem10.get_top(), buff=0, stroke_width = 6)
        self.play(Create(from20))
        self.wait(1)
        top02a = Arrow(start = elem20.get_left() + 0.6*LEFT, end = elem20.get_left(), buff=0, stroke_width = 4)
        top02t = Text("top").scale(0.3).next_to(top02a, UP, buff=0, aligned_edge=LEFT)
        top02 = VGroup(top02a, top02t)
        self.play(ReplacementTransform(top01, top02))
        self.wait(1)
        self.play(Unwrite(push20))
        self.wait(1)
        
        #push(2, 30)
        push30 = Text("push(2, 30)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push30))
        self.wait(1)
        elem30 = MobjectTable([[Text("30", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(bigent[2], UP*3)
        self.play(Create(elem30))
        self.wait(1)
        t30 = Text("30").scale(0.6).move_to(elem30.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t30))
        self.wait(1)
        from30 = Arrow(start = elem30.get_bottom(), end = bigent[2].get_top(), buff=0, stroke_width = 6)
        self.play(Create(from30))
        self.wait(1)
        top21a = Arrow(start = elem30.get_left() + 0.6*LEFT, end = elem30.get_left(), buff=0, stroke_width = 4)
        top21t = Text("top").scale(0.3).next_to(top21a, UP, buff=0, aligned_edge=LEFT)
        top21 = VGroup(top21a, top21t)
        self.play(ReplacementTransform(top20, top21))
        self.wait(1)
        self.play(Unwrite(push30))
        self.wait(1)
        
        #push(0, 40)
        push40 = Text("push(0, 40)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push40))
        self.wait(1)
        elem40 = MobjectTable([[Text("40", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(elem20, UP*3)
        self.play(Create(elem40))
        self.wait(1)
        t40 = Text("40").scale(0.6).move_to(elem40.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t40))
        self.wait(1)
        from40 = Arrow(start = elem40.get_bottom(), end = elem20.get_top(), buff=0, stroke_width = 6)
        self.play(Create(from40))
        self.wait(1)
        top03a = Arrow(start = elem40.get_left() + 0.6*LEFT, end = elem40.get_left(), buff=0, stroke_width = 4)
        top03t = Text("top").scale(0.3).next_to(top03a, UP, buff=0, aligned_edge=LEFT)
        top03 = VGroup(top03a, top03t)
        self.play(ReplacementTransform(top02, top03))
        self.wait(1)
        self.play(Unwrite(push40))
        self.wait(1)

        #push(4, 50)
        push50 = Text("push(4, 50)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push50))
        self.wait(1)
        elem50 = MobjectTable([[Text("50", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(bigent[4], UP*3)
        self.play(Create(elem50))
        self.wait(1)
        t50 = Text("50").scale(0.6).move_to(elem50.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t50))
        self.wait(1)
        from50 = Arrow(start = elem50.get_bottom(), end = bigent[4].get_top(), buff=0, stroke_width = 6)
        self.play(Create(from50))
        self.wait(1)
        top41a = Arrow(start = elem50.get_left() + 0.6*LEFT, end = elem50.get_left(), buff=0, stroke_width = 4)
        top41t = Text("top").scale(0.3).next_to(top41a, UP, buff=0, aligned_edge=LEFT)
        top41 = VGroup(top41a, top41t)
        self.play(ReplacementTransform(top40, top41))
        self.wait(1)
        self.play(Unwrite(push50))
        self.wait(1)
       
        #pop(0)
        pop40 = Text("pop(0)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(pop40))
        self.wait(1)
        self.play(Flash(t40))
        self.wait(1)
        self.play(Unwrite(t40))
        self.wait(1)
        top02a = Arrow(start = elem20.get_left() + 0.6*LEFT, end = elem20.get_left(), buff=0, stroke_width = 4)
        top02t = Text("top").scale(0.3).next_to(top02a, UP, buff=0, aligned_edge=LEFT)
        top02 = VGroup(top02a, top02t)
        self.play(ReplacementTransform(top03, top02))
        self.wait(1)
        self.play(Uncreate(elem40), Uncreate(from40))
        self.wait(1)
        self.play(Unwrite(pop40))
        self.wait(1)
       
        #push(2, 60)
        push60 = Text("push(2, 60)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(push60))
        self.wait(1)
        elem60 = MobjectTable([[Text("60", color=BLACK)]], include_outer_lines=True, line_config={"color": WHITE}).scale(0.6).next_to(elem30, UP*3)
        self.play(Create(elem60))
        self.wait(1)
        t60 = Text("60").scale(0.6).move_to(elem60.get_entries_without_labels((1,1)).get_center())
        self.play(Write(t60))
        self.wait(1)
        from60 = Arrow(start = elem60.get_bottom(), end = elem30.get_top(), buff=0, stroke_width = 6)
        self.play(Create(from60))
        self.wait(1)
        top22a = Arrow(start = elem60.get_left() + 0.6*LEFT, end = elem60.get_left(), buff=0, stroke_width = 4)
        top22t = Text("top").scale(0.3).next_to(top22a, UP, buff=0, aligned_edge=LEFT)
        top22 = VGroup(top22a, top22t)
        self.play(ReplacementTransform(top21, top22))
        self.wait(1)
        self.play(Unwrite(push60))
        self.wait(1)

        #pop(4)
        pop50 = Text("pop(4)").scale(0.6).next_to(operation, DOWN)
        self.play(Write(pop50))
        self.wait(1)
        self.play(Flash(t50))
        self.wait(1)
        self.play(Unwrite(t50))
        self.wait(1)
        top40a = Arrow(start = bigent[4].get_left() + 0.6*LEFT, end = bigent[4].get_left(), buff=0, stroke_width = 4)
        top40t = Text("top").scale(0.3).next_to(top40a, UP, buff=0, aligned_edge=LEFT)
        top40 = VGroup(top40a, top40t)
        self.play(ReplacementTransform(top41, top40))
        self.wait(1)
        self.play(Uncreate(elem50), Uncreate(from50))
        self.wait(1)
        self.play(Unwrite(pop50))
        self.wait(2)